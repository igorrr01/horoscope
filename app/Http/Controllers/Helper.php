<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use DefStudio\Telegraph\Keyboard\ReplyKeyboard;
use DefStudio\Telegraph\Keyboard\ReplyButton;

class Helper extends Controller
{
    // –¢—Ä–∞–Ω—Å–ª–∏—Ç –∑–æ–¥–∏–∞–∫–∞ –Ω–∞ –∞–Ω–≥–ª
    public static function zodiacName($text)
    {
        if ($text == '‚ôàÔ∏è –û–≤–µ–Ω') {
            $zodiac = 'aries';
        }elseif ($text == '‚ôâÔ∏è –¢–µ–ª–µ—Ü') {
            $zodiac = 'taurus';
        }elseif ($text == '‚ôäÔ∏è –ë–ª–∏–∑–Ω–µ—Ü—ã') {
            $zodiac = 'gemini';
        }elseif ($text == '‚ôãÔ∏è –†–∞–∫') {
            $zodiac = 'cancer';
        }elseif ($text == '‚ôåÔ∏è –õ–µ–≤') {
            $zodiac = 'lion';
        }elseif ($text == '‚ôçÔ∏è –î–µ–≤–∞') {
            $zodiac = 'virgo';
        }elseif ($text == '‚ôéÔ∏è –í–µ—Å—ã') {
            $zodiac = 'libra';
        }elseif ($text == '‚ôèÔ∏è –°–∫–æ—Ä–ø–∏–æ–Ω') {
            $zodiac = 'scorpio';
        }elseif ($text == '‚ôêÔ∏è –°—Ç—Ä–µ–ª–µ—Ü') {
            $zodiac = 'sagittarius';
        }elseif ($text == '‚ôëÔ∏è –ö–æ–∑–µ—Ä–æ–≥') {
            $zodiac = 'capricorn';
        }elseif ($text == '‚ôíÔ∏è –í–æ–¥–æ–ª–µ–π') {
            $zodiac = 'aquarius';
        }elseif ($text == '‚ôìÔ∏è –†—ã–±—ã') {
            $zodiac = 'pisces';
        }

        return $zodiac;
    }

    public static function replyKeybordHelperDate()
    {
        return  ReplyKeyboard::make()
        ->row([
            ReplyButton::make('–ù–∞ –∑–∞–≤—Ç—Ä–∞'),
            ReplyButton::make('–ù–∞ –Ω–µ–¥–µ–ª—é'),
        ])
        ->row([
            ReplyButton::make('–ù–∞ –º–µ—Å—è—Ü'),
            ReplyButton::make('–ù–∞ –≥–æ–¥'),
        ])
        ->row([
            ReplyButton::make('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
        ]);
    }

    public static function replyKeybordZodiac()
    {
        return  ReplyKeyboard::make()
        ->row([
            ReplyButton::make('‚ôàÔ∏è –û–≤–µ–Ω'),
            ReplyButton::make('‚ôâÔ∏è –¢–µ–ª–µ—Ü'),
            ReplyButton::make('‚ôäÔ∏è –ë–ª–∏–∑–Ω–µ—Ü—ã'),
        ])
        ->row([
            ReplyButton::make('‚ôãÔ∏è –†–∞–∫'),
            ReplyButton::make('‚ôåÔ∏è –õ–µ–≤'),
            ReplyButton::make('‚ôçÔ∏è –î–µ–≤–∞'),
        ])
        ->row([
            ReplyButton::make('‚ôéÔ∏è –í–µ—Å—ã'),
            ReplyButton::make('‚ôèÔ∏è –°–∫–æ—Ä–ø–∏–æ–Ω'),
            ReplyButton::make('‚ôêÔ∏è –°—Ç—Ä–µ–ª–µ—Ü'),
        ])
        ->row([
            ReplyButton::make('‚ôëÔ∏è –ö–æ–∑–µ—Ä–æ–≥'),
            ReplyButton::make('‚ôíÔ∏è –í–æ–¥–æ–ª–µ–π'),
            ReplyButton::make('‚ôìÔ∏è –†—ã–±—ã'),
        ])
        ->row([
            ReplyButton::make('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
        ]);
    }

    public static function replyKeybordMainPage()
    {
        return  ReplyKeyboard::make()
        ->row([
            ReplyButton::make('üíü –õ—é–±–æ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø'),
            ReplyButton::make('üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø'),
        ])
        ->row([
            ReplyButton::make('üü£ –ú–∞–≥–∏—è —á–∏—Å–µ–ª'),
            ReplyButton::make('üÄÑÔ∏è –ö–∞—Ä—Ç—ã —Ç–∞—Ä–æ'),
        ])
        ->row([
            ReplyButton::make('üèµ –í–æ—Å—Ç–æ—á–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø'),
        ]);
    }

}
