<?

namespace App\Telegram;

use DefStudio\Telegraph\Handlers\WebhookHandler;
use Illuminate\Http\Request;
use DefStudio\Telegraph\Models\TelegraphBot;
use Illuminate\Support\Stringable;
use DefStudio\Telegraph\Facades\Telegraph;
use Illuminate\Support\Facades\Storage;
use DefStudio\Telegraph\Keyboard\ReplyKeyboard;
use DefStudio\Telegraph\Keyboard\ReplyButton;
use DefStudio\Telegraph\Keyboard\Button;
use DefStudio\Telegraph\Keyboard\Keyboard;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Carbon;
use DefStudio\Telegraph\Models\TelegraphChat;

class Handler extends WebhookHandler
{

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    public function hello()
    {
        $this->reply('–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ :)');
/*         $users = DB::table('telegraph_chats')->get();
        foreach($users as $user){
            $messageToAllUsers = TelegraphChat::find($user->id);
            $messageToAllUsers->message('–ø—Ä–æ–≤–µ—Ä–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞')->send();
        } */
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    protected function handleUnknownCommand(Stringable $text): void
    {
        if($text->value() === '/start'){
            $this->chat->message('
*–ü—Ä–∏–≤–µ—Ç! –Ø - –≥–æ—Ä–æ—Å–∫–æ–ø –±–æ—Ç ‚ú®*

–Ø –ø—Ä–µ–¥—Å–∫–∞–∂—É —Ç–≤–æ–π –¥–µ–Ω—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞, –ø—Ä–æ–≤–µ—Ä—é –≤–∞—à—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º, –∞ —Ç–∞–∫–∂–µ —Å–¥–µ–ª–∞—é —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ üîÆ
            ')->photo(Storage::path('start_logo.jpeg'))->send(); 
            
            $this->chat->message('1')->replyKeyboard(ReplyKeyboard::make()
                ->row([
                ReplyButton::make('üíü –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å'),
                ReplyButton::make('üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø'),    
                ])
                ->row([ 
                ReplyButton::make('üü£ –ú–∞–≥–∏—è —á–∏—Å–µ–ª'),
                ReplyButton::make('üÄÑÔ∏è –ö–∞—Ä—Ç—ã —Ç–∞—Ä–æ'),
                ])
                ->row([ 
                ReplyButton::make('üèµ –í–æ—Å—Ç–æ—á–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø'),
                ])
            )
            ->send();

        }else{
            $this->reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
        }

    }


    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    protected function handleChatMessage(Stringable $text): void
    {
        if($text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'){
                        $this->chat->message('1')->replyKeyboard(ReplyKeyboard::make()
                            ->row([
                            ReplyButton::make('üíü –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å'),
                            ReplyButton::make('üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø'),    
                            ])
                            ->row([ 
                            ReplyButton::make('üü£ –ú–∞–≥–∏—è —á–∏—Å–µ–ª'),
                            ReplyButton::make('üÄÑÔ∏è –ö–∞—Ä—Ç—ã —Ç–∞—Ä–æ'),
                            ])
                            ->row([ 
                            ReplyButton::make('üèµ –í–æ—Å—Ç–æ—á–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø'),
                            ])
                        )
                        ->send();
        }

        if($text == 'üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø'){

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
            $this->chat->message('2')->replyKeyboard(ReplyKeyboard::make()
                ->row([
                ReplyButton::make('‚ôàÔ∏è –û–≤–µ–Ω'),
                ReplyButton::make('‚ôâÔ∏è –¢–µ–ª–µ—Ü'),    
                ReplyButton::make('‚ôäÔ∏è –ë–ª–∏–∑–Ω–µ—Ü—ã'),    
                ])
                ->row([ 
                ReplyButton::make('‚ôãÔ∏è –†–∞–∫'),
                ReplyButton::make('‚ôåÔ∏è –õ–µ–≤'),
                ReplyButton::make('‚ôçÔ∏è –î–µ–≤–∞'),
                ])
                ->row([ 
                ReplyButton::make('‚ôéÔ∏è –í–µ—Å—ã'),
                ReplyButton::make('‚ôèÔ∏è –°–∫–æ—Ä–ø–∏–æ–Ω'),
                ReplyButton::make('‚ôêÔ∏è –°—Ç—Ä–µ–ª–µ—Ü'),
                ])
                ->row([ 
                ReplyButton::make('‚ôëÔ∏è –ö–æ–∑–µ—Ä–æ–≥'),
                ReplyButton::make('‚ôíÔ∏è –í–æ–¥–æ–ª–µ–π'),
                ReplyButton::make('‚ôìÔ∏è –†—ã–±—ã'),
                ])
                ->row([ 
                ReplyButton::make('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
                ])
            )
            ->send();
        }

        if($text == '‚ôàÔ∏è –û–≤–µ–Ω' || $text == '‚ôâÔ∏è –¢–µ–ª–µ—Ü' || $text == '‚ôäÔ∏è –ë–ª–∏–∑–Ω–µ—Ü—ã' || $text == '‚ôãÔ∏è –†–∞–∫' 
        || $text == '‚ôåÔ∏è –õ–µ–≤' || $text == '‚ôçÔ∏è –î–µ–≤–∞' || $text == '‚ôéÔ∏è –í–µ—Å—ã' || $text == '‚ôèÔ∏è –°–∫–æ—Ä–ø–∏–æ–Ω' 
        || $text == '‚ôêÔ∏è –°—Ç—Ä–µ–ª–µ—Ü' || $text == '‚ôëÔ∏è –ö–æ–∑–µ—Ä–æ–≥' || $text == '‚ôíÔ∏è –í–æ–¥–æ–ª–µ–π' || $text == '‚ôìÔ∏è –†—ã–±—ã'){

            if($text == '‚ôàÔ∏è –û–≤–µ–Ω'){
                $zodiac = 'aries';
            }
            if($text == '‚ôâÔ∏è –¢–µ–ª–µ—Ü'){
                $zodiac = 'taurus';
            }
            if($text == '‚ôäÔ∏è –ë–ª–∏–∑–Ω–µ—Ü—ã'){
                $zodiac = 'gemini';
            }
            if($text == '‚ôãÔ∏è –†–∞–∫'){
                $zodiac = 'cancer';
            }
            if($text == '‚ôåÔ∏è –õ–µ–≤'){
                $zodiac = 'lion';
            }
            if($text == '‚ôçÔ∏è –î–µ–≤–∞'){
                $zodiac = 'virgo';
            }
            if($text == '‚ôéÔ∏è –í–µ—Å—ã'){
                $zodiac = 'libra';
            }
            if($text == '‚ôèÔ∏è –°–∫–æ—Ä–ø–∏–æ–Ω'){
                $zodiac = 'scorpio';
            }
            if($text == '‚ôêÔ∏è –°—Ç—Ä–µ–ª–µ—Ü'){
                $zodiac = 'sagittarius';
            }
            if($text == '‚ôëÔ∏è –ö–æ–∑–µ—Ä–æ–≥'){
                $zodiac = 'capricorn';
            }
            if($text == '‚ôíÔ∏è –í–æ–¥–æ–ª–µ–π'){
                $zodiac = 'aquarius';
            }
            if($text == '‚ôìÔ∏è –†—ã–±—ã'){
                $zodiac = 'pisces';
            }

            $homepage = file_get_contents("https://orakul.com/horoscope/astrologic/general/{$zodiac}/today.html");

            $pattern = '/<div class="horoBlock">(.*?)>(.*?)<\/div>/s';
            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            if (preg_match($pattern, $homepage, $matches)) {
                // $matches[1] —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, –Ω–∞–π–¥–µ–Ω–Ω—ã–π –º–µ–∂–¥—É —Ç–µ–≥–æ–º
                $foundText = $matches[2];
                // –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                $horo = trim(stristr($foundText, '<', true));
            } else {
                // –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                $horo = "–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–µ –Ω–∞–π–¥–µ–Ω";
            }

            $dt = Carbon::now();
            $todayDate = str_replace('-','.',$dt->format('d.m.Y')); 

            $this->chat->message("*$text* –Ω–∞ $todayDate

üîÆ $horo")->send();


            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
            $this->chat->message('4')->replyKeyboard(ReplyKeyboard::make()
                ->row([ 
                ReplyButton::make('–ù–∞ –∑–∞–≤—Ç—Ä–∞'),
                ReplyButton::make('–ù–∞ –Ω–µ–¥–µ–ª—é'),
                ])
                ->row([ 
                ReplyButton::make('–ù–∞ –º–µ—Å—è—Ü'),
                ReplyButton::make('–ù–∞ –≥–æ–¥'),
                ])
                ->row([ 
                ReplyButton::make('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
                ])
            )
            ->send();            

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –≤ –ë–î
            DB::table('telegraph_chats')
              ->where('chat_id', $this->chat->chat_id)
              ->update(['last_zodiac' => 'aries']);
        }


        // –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if($text == '–ù–∞ –∑–∞–≤—Ç—Ä–∞'){

            $userChat = DB::table('telegraph_chats')
            ->select('last_zodiac')->where('chat_id', $this->chat->chat_id)
            ->first();

            $homepage = file_get_contents("https://orakul.com/horoscope/astrologic/general/{$userChat->last_zodiac}/tomorrow.html");

            $pattern = '/<div class="horoBlock">(.*?)>(.*?)<\/div>/s';
            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            if (preg_match($pattern, $homepage, $matches)) {
                // $matches[1] —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, –Ω–∞–π–¥–µ–Ω–Ω—ã–π –º–µ–∂–¥—É —Ç–µ–≥–æ–º
                $foundText = $matches[2];
                // –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                $horo = trim(stristr($foundText, '<', true));
            } else {
                // –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                $horo = "–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–µ –Ω–∞–π–¥–µ–Ω";
            }

            $this->chat->message("$horo")->send();

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
            $this->chat->message(1)->replyKeyboard(ReplyKeyboard::make()
                ->row([ 
                ReplyButton::make('–ù–∞ –∑–∞–≤—Ç—Ä–∞'),
                ReplyButton::make('–ù–∞ –Ω–µ–¥–µ–ª—é'),
                ])
                ->row([ 
                ReplyButton::make('–ù–∞ –º–µ—Å—è—Ü'),
                ReplyButton::make('–ù–∞ –≥–æ–¥'),
                ])
                ->row([ 
                ReplyButton::make('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
                ])
            )
            ->send();            

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –≤ –ë–î
            DB::table('telegraph_chats')
              ->where('chat_id', $this->chat->chat_id)
              ->update(['last_zodiac' => $userChat->last_zodiac]);
        }

        // –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é
        if($text == '–ù–∞ –Ω–µ–¥–µ–ª—é'){

            $userChat = DB::table('telegraph_chats')
            ->select('last_zodiac')->where('chat_id', $this->chat->chat_id)
            ->first();

            $homepage = file_get_contents("https://orakul.com/horoscope/astrologic/general/{$userChat->last_zodiac}/week.html");

            $pattern = '/<div class="horoBlock">(.*?)>(.*?)<\/div>/s';
            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            if (preg_match($pattern, $homepage, $matches)) {
                // $matches[1] —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, –Ω–∞–π–¥–µ–Ω–Ω—ã–π –º–µ–∂–¥—É —Ç–µ–≥–æ–º
                $foundText = $matches[2];
                // –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                $horo = trim(stristr($foundText, '<', true));
            } else {
                // –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                $horo = "–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–µ –Ω–∞–π–¥–µ–Ω";
            }

            $this->chat->message("$horo")->send();

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
            $this->chat->message(1)->replyKeyboard(ReplyKeyboard::make()
                ->row([ 
                ReplyButton::make('–ù–∞ –∑–∞–≤—Ç—Ä–∞'),
                ReplyButton::make('–ù–∞ –Ω–µ–¥–µ–ª—é'),
                ])
                ->row([ 
                ReplyButton::make('–ù–∞ –º–µ—Å—è—Ü'),
                ReplyButton::make('–ù–∞ –≥–æ–¥'),
                ])
                ->row([ 
                ReplyButton::make('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
                ])
            )
            ->send();            

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –≤ –ë–î
            DB::table('telegraph_chats')
              ->where('chat_id', $this->chat->chat_id)
              ->update(['last_zodiac' => $userChat->last_zodiac]);
        }

        // –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –º–µ—Å—è—Ü
        if($text == '–ù–∞ –º–µ—Å—è—Ü'){

            $userChat = DB::table('telegraph_chats')
            ->select('last_zodiac')->where('chat_id', $this->chat->chat_id)
            ->first();

            $homepage = file_get_contents("https://orakul.com/horoscope/astrologic/general/{$userChat->last_zodiac}/month.html");

            $pattern = '/<div class="horoBlock">(.*?)>(.*?)<\/div>/s';
            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            if (preg_match($pattern, $homepage, $matches)) {
                // $matches[1] —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, –Ω–∞–π–¥–µ–Ω–Ω—ã–π –º–µ–∂–¥—É —Ç–µ–≥–æ–º
                $foundText = $matches[2];
                // –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                $horo = trim(stristr($foundText, '<', true));
            } else {
                // –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                $horo = "–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–µ –Ω–∞–π–¥–µ–Ω";
            }

            $this->chat->message("$horo")->send();

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
            $this->chat->message(1)->replyKeyboard(ReplyKeyboard::make()
                ->row([ 
                ReplyButton::make('–ù–∞ –∑–∞–≤—Ç—Ä–∞'),
                ReplyButton::make('–ù–∞ –Ω–µ–¥–µ–ª—é'),
                ])
                ->row([ 
                ReplyButton::make('–ù–∞ –º–µ—Å—è—Ü'),
                ReplyButton::make('–ù–∞ –≥–æ–¥'),
                ])
                ->row([ 
                ReplyButton::make('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
                ])
            )
            ->send();            

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –≤ –ë–î
            DB::table('telegraph_chats')
              ->where('chat_id', $this->chat->chat_id)
              ->update(['last_zodiac' => $userChat->last_zodiac]);
        }

        // –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –≥–æ–¥
        if($text == '–ù–∞ –≥–æ–¥'){

            $userChat = DB::table('telegraph_chats')
            ->select('last_zodiac')->where('chat_id', $this->chat->chat_id)
            ->first();

            $homepage = file_get_contents("https://orakul.com/horoscope/astrologic/general/{$userChat->last_zodiac}/year.html");

            $pattern = '/<div class="horoBlock">(.*?)>(.*?)<\/div>/s';
            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            if (preg_match($pattern, $homepage, $matches)) {
                // $matches[1] —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, –Ω–∞–π–¥–µ–Ω–Ω—ã–π –º–µ–∂–¥—É —Ç–µ–≥–æ–º
                $foundText = $matches[2];
                // –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                $horo = trim(stristr($foundText, '<', true));
            } else {
                // –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                $horo = "–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–µ –Ω–∞–π–¥–µ–Ω";
            }

            $this->chat->message("$horo")->send();

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
            $this->chat->message(1)->replyKeyboard(ReplyKeyboard::make()
                ->row([ 
                ReplyButton::make('–ù–∞ –∑–∞–≤—Ç—Ä–∞'),
                ReplyButton::make('–ù–∞ –Ω–µ–¥–µ–ª—é'),
                ])
                ->row([ 
                ReplyButton::make('–ù–∞ –º–µ—Å—è—Ü'),
                ReplyButton::make('–ù–∞ –≥–æ–¥'),
                ])
                ->row([ 
                ReplyButton::make('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
                ])
            )
            ->send();            

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –≤ –ë–î
            DB::table('telegraph_chats')
              ->where('chat_id', $this->chat->chat_id)
              ->update(['last_zodiac' => $userChat->last_zodiac]);
        }


    }
    
}