<?

namespace App\Telegram;

use DefStudio\Telegraph\Handlers\WebhookHandler;
use Illuminate\Http\Request;
use DefStudio\Telegraph\Models\TelegraphBot;
use Illuminate\Support\Stringable;
use DefStudio\Telegraph\Facades\Telegraph;
use Illuminate\Support\Facades\Storage;
use DefStudio\Telegraph\Keyboard\ReplyKeyboard;
use DefStudio\Telegraph\Keyboard\ReplyButton;
use DefStudio\Telegraph\Keyboard\Button;
use DefStudio\Telegraph\Keyboard\Keyboard;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Carbon;
use DefStudio\Telegraph\Models\TelegraphChat;
use App\Http\Controllers\Helper;

class Handler extends WebhookHandler
{

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    public function hello()
    {
        $this->reply('–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ :)');
        /*         $users = DB::table('telegraph_chats')->get();
        foreach($users as $user){
            $messageToAllUsers = TelegraphChat::find($user->id);
            $messageToAllUsers->message('–ø—Ä–æ–≤–µ—Ä–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞')->send();
        } */
    }

    public function atb()
    {
        // –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞–∫—Ü–∏—é
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "https://www.lovesales.com.ua/aktsiyni-katalogy/atb");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch,CURLOPT_USERAGENT,'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.13) Gecko/20080311 Firefox/2.0.0.13');
        $output = curl_exec($ch);
        curl_close($ch); 
        
    
        preg_match('/–ê–¢–ë-–ú–∞—Ä–∫–µ—Ç<\/h3><\/a><a href="(.*?)–ï–∫–æ–Ω–æ–º—ñ—è/s', $output, $first);
        $second = mb_substr($first[1], -200);
        preg_match('/<a href="(.*?)">/s', $second, $third);
    
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "https://www.lovesales.com.ua$third[1]");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch,CURLOPT_USERAGENT,'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.13) Gecko/20080311 Firefox/2.0.0.13');
        $four = curl_exec($ch);
        curl_close($ch); 
    
        preg_match('/<meta property="og:image" content=(.*?)\/>/s', $four, $five);

        if(empty($five))
        {
            $this->chat->message("–°–∫–∏–¥–∫–∏ –ø–æ—è–≤—è—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤")->send();
        }
    
        // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ —Å –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ URL
        $six = mb_substr($five[1], 1, -1);
    
        $url[] = $six;
        $url[] = mb_substr($six, 0, -5) . 2 . '.jpg';
        $url[] = mb_substr($six, 0, -5) . 3 . '.jpg';
        $url[] = mb_substr($six, 0, -5) . 4 . '.jpg';
        $url[] = mb_substr($six, 0, -5) . 5 . '.jpg';

        if(empty($url))
        {
            $this->chat->message("–°–∫–∏–¥–∫–∏ –ø–æ—è–≤—è—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤")->send();
        }else{

            $this->chat->photo("$url[0]")->send();
            sleep(1);
            $this->chat->photo("$url[1]")->send();
            sleep(1);
            $this->chat->photo("$url[2]")->send();
            sleep(1);
            $this->chat->photo("$url[3]")->send();
            sleep(1);
            $this->chat->photo("$url[4]")->send();
        }

    }

    public function eco()
    {
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "https://www.lovesales.com.ua/aktsiyni-katalogy/eko");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch,CURLOPT_USERAGENT,'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.13) Gecko/20080311 Firefox/2.0.0.13');
        $output = curl_exec($ch);
        curl_close($ch); 
    
        preg_match('/–ï–ö–û-–º–∞—Ä–∫–µ—Ç<\/h3><\/a><a href="(.*?)–ö–∞—Ç–∞–ª–æ–≥/s', $output, $first);
        $second = mb_substr($first[1], -200);
        preg_match('/<a href="(.*?)">/s', $second, $third);
    
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "https://www.lovesales.com.ua$third[1]");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch,CURLOPT_USERAGENT,'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.13) Gecko/20080311 Firefox/2.0.0.13');
        $four = curl_exec($ch);
        curl_close($ch); 
    
        preg_match('/<meta property="og:image" content=(.*?)\/>/s', $four, $five);
        
        if(empty($five))
        {
            $this->chat->message("–°–∫–∏–¥–∫–∏ –ø–æ—è–≤—è—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤")->send();
        }
    
        // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ —Å –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ URL
        $six = mb_substr($five[1], 1, -1);
    
        $url[] = $six;
        $url[] = mb_substr($six, 0, -5) . 2 . '.jpg';
        $url[] = mb_substr($six, 0, -5) . 3 . '.jpg';
        $url[] = mb_substr($six, 0, -5) . 4 . '.jpg';
        $url[] = mb_substr($six, 0, -5) . 5 . '.jpg'; 
        $url[] = mb_substr($six, 0, -5) . 6 . '.jpg'; 
        $url[] = mb_substr($six, 0, -5) . 7 . '.jpg'; 
        $url[] = mb_substr($six, 0, -5) . 8 . '.jpg'; 
        $url[] = mb_substr($six, 0, -5) . 9 . '.jpg'; 
        $url[] = mb_substr($six, 0, -6) . 10 . '.jpg'; 
        $url[] = mb_substr($six, 0, -6) . 11 . '.jpg'; 
        $url[] = mb_substr($six, 0, -6) . 12 . '.jpg'; 
        $url[] = mb_substr($six, 0, -6) . 13 . '.jpg'; 
        $url[] = mb_substr($six, 0, -6) . 14 . '.jpg'; 

        $this->chat->photo("$url[0]")->send();
        sleep(1);
        $this->chat->photo("$url[1]")->send();
        sleep(1);
        $this->chat->photo("$url[2]")->send();
        sleep(1);
        $this->chat->photo("$url[3]")->send();
        sleep(1);
        $this->chat->photo("$url[4]")->send();
        sleep(1);
        $this->chat->photo("$url[5]")->send();
        sleep(1);
        $this->chat->photo("$url[6]")->send();
        sleep(1);
        $this->chat->photo("$url[7]")->send();
        sleep(1);
        $this->chat->photo("$url[8]")->send();
        sleep(1);
        $this->chat->photo("$url[9]")->send();
        sleep(1);
        $this->chat->photo("$url[10]")->send();
        sleep(1);
        $this->chat->photo("$url[11]")->send();
        sleep(1);
        $this->chat->photo("$url[12]")->send();
        sleep(1);
        $this->chat->photo("$url[13]")->send();
/*         sleep(1);
        $this->chat->photo("$url[14]")->send(); */
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    protected function handleUnknownCommand(Stringable $text): void
    {
        if ($text->value() === '/start') {
            $this->chat->message('
*–ü—Ä–∏–≤–µ—Ç! –Ø - –≥–æ—Ä–æ—Å–∫–æ–ø –±–æ—Ç ‚ú®*

–Ø –ø—Ä–µ–¥—Å–∫–∞–∂—É —Ç–≤–æ–π –¥–µ–Ω—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞, –ø—Ä–æ–≤–µ—Ä—é –≤–∞—à—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º, –∞ —Ç–∞–∫–∂–µ —Å–¥–µ–ª–∞—é —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ üîÆ
            ')->photo(Storage::path('start_logo.jpeg'))->send();

            $this->chat->message('1')->replyKeyboard(Helper::replyKeybordMainPage())->send();
        } else {
            $this->reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
        }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    protected function handleChatMessage(Stringable $text): void
    {
        if ($text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
            $this->chat->message('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')->replyKeyboard(Helper::replyKeybordMainPage())->send();
        }

        if ($text == 'ü™¨ –•–∏—Ä–æ–º–∞–Ω—Ç–∏—è') {
            Helper::hiromant($this->chat);
        }

        if ($text == 'üèµ –ö–∏—Ç–∞–π—Å–∫–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø') {
            $this->chat->message('üîÜ –í—ã–±–µ—Ä–µ—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –ø–æ –≥–æ–¥—É –í–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –≥–æ–¥')->replyKeyboard(Helper::replyKeybordEastMainPage())->send();
        }

        if ($text == 'üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø' || $text == 'üíü –õ—é–±–æ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø') {

            if ($text == 'üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø'){
                $textMessage = '*üîÆ –í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è*';
                $messageIMG = 'horoscope.jpg';
            }
            if ($text == 'üíü –õ—é–±–æ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø'){
                $textMessage = '*üíü –í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å üíû –ª—é–±–æ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è*';
                $messageIMG = 'love_horocope2.jpg';
            }

            $this->chat->message("$textMessage")->photo(Storage::path("$messageIMG"))
                ->replyKeyboard(Helper::replyKeybordZodiac())->send();

            if ($text == 'üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø') {
                $horoscope_type = 'general';
            }
            if ($text == 'üíü –õ—é–±–æ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø') {
                $horoscope_type = 'love';
            }
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –≤ –ë–î
            DB::table('telegraph_chats')->where('chat_id', $this->chat->chat_id)->update(['horoscope_type' => $horoscope_type]);
        }

        // –ö–∏—Ç–∞–π—Å–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø
        if($text == '–°–≤–∏–Ω—å—è' || $text == '–ö—Ä—ã—Å–∞' || $text == '–í–æ–ª' || $text == '–¢–∏–≥—Ä'
            || $text == '–ó–∞—è—Ü (–ö–æ—Ç)' || $text == '–î—Ä–∞–∫–æ–Ω' || $text == '–ó–º–µ—è' || $text == '–õ–æ—à–∞–¥—å'
            || $text == '–ö–æ–∑–∞' || $text == '–û–±–µ–∑—å—è–Ω–∞' || $text == '–ü–µ—Ç—É—Ö' || $text == '–°–æ–±–∞–∫–∞'){

            // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∑–æ–¥–∏–∞–∫–∞ –Ω–∞ –∞–Ω–≥–ª.
            $zodiac = Helper::ChinazodiacName($text);
            
                $homepage = file_get_contents("https://orakul.com/horoscope/chinese/general/{$zodiac}/year.html");
                $pattern = '/<div class="horoBlock">(.*?)>(.*?)<\/div>/s';
                if (preg_match($pattern, $homepage, $matches)) {
                    $foundText = $matches[2];
                    $horo = trim(stristr($foundText, '<', true));
                } else {
                    $horo = "–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–µ –Ω–∞–π–¥–µ–Ω";
                }

                $dt = Carbon::now();
                $todayDate = str_replace('-', '.', $dt->format('d.m.Y'));

                $this->chat->message("*–ö–∏—Ç–∞–π—Å–∫–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø üîÜ $text* –Ω–∞ $todayDate

üîÆ $horo")->replyKeyboard(Helper::replyKeybordMainPage())->send();

        }


        if($text == '‚ôàÔ∏è –û–≤–µ–Ω' || $text == '‚ôâÔ∏è –¢–µ–ª–µ—Ü' || $text == '‚ôäÔ∏è –ë–ª–∏–∑–Ω–µ—Ü—ã' || $text == '‚ôãÔ∏è –†–∞–∫'
            || $text == '‚ôåÔ∏è –õ–µ–≤' || $text == '‚ôçÔ∏è –î–µ–≤–∞' || $text == '‚ôéÔ∏è –í–µ—Å—ã' || $text == '‚ôèÔ∏è –°–∫–æ—Ä–ø–∏–æ–Ω'
            || $text == '‚ôêÔ∏è –°—Ç—Ä–µ–ª–µ—Ü' || $text == '‚ôëÔ∏è –ö–æ–∑–µ—Ä–æ–≥' || $text == '‚ôíÔ∏è –í–æ–¥–æ–ª–µ–π' || $text == '‚ôìÔ∏è –†—ã–±—ã'){

            // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∑–æ–¥–∏–∞–∫–∞ –Ω–∞ –∞–Ω–≥–ª.
            $zodiac = Helper::zodiacName($text);

            $userChat = DB::table('telegraph_chats')->select('last_zodiac', 'horoscope_type')->where('chat_id', $this->chat->chat_id)->first();

            $homepage = file_get_contents("https://orakul.com/horoscope/astrologic/{$userChat->horoscope_type}/{$zodiac}/today.html");
            $pattern = '/<div class="horoBlock">(.*?)>(.*?)<\/div>/s';
            if (preg_match($pattern, $homepage, $matches)) {
                $foundText = $matches[2];
                $horo = trim(stristr($foundText, '<', true));
            } else {
                $horo = "–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–µ –Ω–∞–π–¥–µ–Ω";
            }

            $dt = Carbon::now();
            $todayDate = str_replace('-', '.', $dt->format('d.m.Y'));

            $this->chat->message("*$text* –Ω–∞ $todayDate

üîÆ $horo")->replyKeyboard(Helper::replyKeybordHelperDate())->send();

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –≤ –ë–î
            DB::table('telegraph_chats')->where('chat_id', $this->chat->chat_id)->limit(1)->update(['last_zodiac' => $zodiac]);
        }

        // –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if ($text == '–ù–∞ –∑–∞–≤—Ç—Ä–∞') {

            $userChat = DB::table('telegraph_chats')->select('last_zodiac', 'horoscope_type')->where('chat_id', $this->chat->chat_id)->first();

            $homepage = file_get_contents("https://orakul.com/horoscope/astrologic/{$userChat->horoscope_type}/{$userChat->last_zodiac}/tomorrow.html");
            $pattern = '/<div class="horoBlock">(.*?)>(.*?)<\/div>/s';
            if (preg_match($pattern, $homepage, $matches)) {
                $foundText = $matches[2];
                $horo = trim(stristr($foundText, '<', true));
            } else {
                $horo = "–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–µ –Ω–∞–π–¥–µ–Ω";
            }

            $this->chat->message("üîÆ $horo")->replyKeyboard(Helper::replyKeybordHelperDate())->send();

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –≤ –ë–î
            DB::table('telegraph_chats')->where('chat_id', $this->chat->chat_id)->limit(1)->update(['last_zodiac' => $userChat->last_zodiac]);
        }

        // –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é
        if ($text == '–ù–∞ –Ω–µ–¥–µ–ª—é') {

            $userChat = DB::table('telegraph_chats')->select('last_zodiac', 'horoscope_type')->where('chat_id', $this->chat->chat_id)->first();

            $homepage = file_get_contents("https://orakul.com/horoscope/astrologic/{$userChat->horoscope_type}/{$userChat->last_zodiac}/week.html");
            $pattern = '/<div class="horoBlock">(.*?)>(.*?)<\/div>/s';
            if (preg_match($pattern, $homepage, $matches)) {
                $foundText = $matches[2];
                $horo = trim(stristr($foundText, '<', true));
            } else {
                $horo = "–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–µ –Ω–∞–π–¥–µ–Ω";
            }

            $this->chat->message("üîÆ $horo")->replyKeyboard(Helper::replyKeybordHelperDate())->send();

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –≤ –ë–î
            DB::table('telegraph_chats')->where('chat_id', $this->chat->chat_id)->limit(1)->update(['last_zodiac' => $userChat->last_zodiac]);
        }

        // –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –º–µ—Å—è—Ü
        if ($text == '–ù–∞ –º–µ—Å—è—Ü') {

            $userChat = DB::table('telegraph_chats')->select('last_zodiac', 'horoscope_type')->where('chat_id', $this->chat->chat_id)->first();

            $homepage = file_get_contents("https://orakul.com/horoscope/astrologic/{$userChat->horoscope_type}/{$userChat->last_zodiac}/month.html");
            $pattern = '/<div class="horoBlock">(.*?)>(.*?)<\/div>/s';
            if (preg_match($pattern, $homepage, $matches)) {
                $foundText = $matches[2];
                $horo = trim(stristr($foundText, '<', true));
            } else {
                $horo = "–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–µ –Ω–∞–π–¥–µ–Ω";
            }

            $this->chat->message("üîÆ $horo")->replyKeyboard(Helper::replyKeybordHelperDate())->send();

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –≤ –ë–î
            DB::table('telegraph_chats')->where('chat_id', $this->chat->chat_id)->limit(1)->update(['last_zodiac' => $userChat->last_zodiac]);
        }

        // –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –≥–æ–¥
        if ($text == '–ù–∞ –≥–æ–¥') {

            $userChat = DB::table('telegraph_chats')->select('last_zodiac', 'horoscope_type')->where('chat_id', $this->chat->chat_id)->first();

            $homepage = file_get_contents("https://orakul.com/horoscope/astrologic/{$userChat->horoscope_type}/{$userChat->last_zodiac}/year.html");
            $pattern = '/<div class="horoBlock">(.*?)>(.*?)<\/div>/s';
            if (preg_match($pattern, $homepage, $matches)) {
                $foundText = $matches[2];
                $horo = trim(stristr($foundText, '<', true));
            } else {
                $horo = "–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–µ –Ω–∞–π–¥–µ–Ω";
            }

            $this->chat->message("üîÆ $horo")->replyKeyboard(Helper::replyKeybordHelperDate())->send();

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –≤ –ë–î
            DB::table('telegraph_chats')->where('chat_id', $this->chat->chat_id)->limit(1)->update(['last_zodiac' => $userChat->last_zodiac]);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–æ—Ç—É
        DB::table('telegraph_chats')->where('chat_id', $this->chat->chat_id)->limit(1)->update(['updated_at' => Carbon::now()]);
    }
}
